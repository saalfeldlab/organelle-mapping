[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "organelle-mapping"
dynamic = ["version"]
description = "Segmenting organelles"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [{ name = "Larissa Heinrich", email = "heinrichl@janelia.hhmi.org" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "daisy",
  "funlib.persistence@git+ssh://git@github.com/funkelab/funlib.persistence.git@main",
  "fibsem-tools>=6.0",
  "matplotlib",
  "funlib.learn.torch@git+ssh://git@github.com/funkelab/funlib.learn.torch.git",
  "gunpowder",
  "corditea@git+ssh://git@github.com/saalfeldlab/corditea.git ",
  "torch",
  "click",
  "xarray",
  "zarr",
  "scikit-image",
  "xarray-multiscale",
  "cellmap-schemas",
  "pydantic-zarr",
  "numcodecs",
  "neuroglancer",
  "dask",
  "tensorboardX",
  "xarray-ome-ngff",
  "monai",
  "einops",
  "pydantic",
  "cellmap-flow@git+ssh://git@github.com/janelia-cellmap/cellmap-flow.git"
]

[project.urls]
Documentation = "https://github.com/saalfeldlab/organelle-mapping#readme"
Issues = "https://github.com/saalfeldlab/organelle-mapping/issues"
Source = "https://github.com/saalfeldlab/organelle-mapping"

[project.scripts]
data_prep = "organelle_mapping.data_preparation:cli"
train = "organelle_mapping.run:main"
inference = "organelle_mapping.inference:cli"

[tool.hatch.version]
path = "src/organelle_mapping/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true
source-layout = "src"

[tool.hatch.envs.default]
dependencies = []
skip-install = false

[tool.hatch.envs.default.env-vars]
MKL_NUM_THREADS = "1"
NUM_MKL_THREADS = "1"
OPENBLAS_NUM_THREADS = "1"
OPENMP_NUM_THREADS = "1"
OMP_NUM_THREADS = "1"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]


[tool.hatch.envs.dev]
detached = false
dependencies = ["jupyter", "pytest", "coverage[toml]>=6.5"]
skip-install = false

[tool.hatch.envs.dev.env-vars]
MKL_NUM_THREADS = "1"
NUM_MKL_THREADS = "1"
OPENBLAS_NUM_THREADS = "1"
OPENMP_NUM_THREADS = "1"
OMP_NUM_THREADS = "1"


[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/organelle_mapping tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["organelle_mapping"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["organelle_mapping", "tests"]
branch = true
parallel = true
omit = ["src/organelle_mapping/__about__.py"]

[tool.coverage.paths]
organelle_mapping = ["src/organelle_mapping", "*/organelle-mapping/src/organelle_mapping"]
tests = ["tests", "*/organelle-mapping/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.pixi.project]
channels = ["nvidia", "pytorch", "conda-forge"]
platforms = ["linux-64"]

[tool.pixi.tasks]
test = "pytest -v"
test-cov = "coverage run -m pytest tests"
cov-report = { cmd = ["coverage combine", "coverage report"], depends-on = ["test-cov"] }
lint = "ruff check ."
format = "ruff format ."
typecheck = "mypy --install-types --non-interactive src/organelle_mapping tests"

[tool.pixi.dependencies]
python = "3.11.*"

[tool.pixi.feature.dev.pypi-dependencies]
organelle-mapping = { path = ".", editable = true }

[tool.pixi.feature.default.pypi-packages]
organelle-mapping = { path = "."}



[tool.pixi.feature.dev.dependencies]
pytest = ">=7.3"
pytest-cov = ">=4.0"
coverage = ">=6.5"
ruff = ">=0.1.0"
mypy = ">=1.0"
black = ">=23.1.0"

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev", "notebooks"], solve-group = "default" }
